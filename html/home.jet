<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Gorilla Sockets</title>
  <!-- CSS only -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <!-- JavaScript Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  <style>
    .chatbox {
      outline: 1px solid silver;
      min-height: 160px;
      padding: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row">
      <div class="col">
        <h1 class=mt-3>Welcome to Gorilla Sockets</h1>
        <a href="https://the-tiger.io">The Tiger</a>
      </div>
    </div>
    <hr />
    <form id="chat-form" class="row">
      <div class="col-md-8">
        <h3>Chat</h3>
        <div class="form-group">
          <label for="username">Username:</label>
          <input
            type="text"
            name="username"
            id="username"
            class="form-control"
            autocomplete="off"
          >
        </div>
        <div class="form-group">
          <label for="message">Message:</label>
          <input type="text" name="message" id="message" class="form-control" autocomplete="off">
          <button type="submit" id="send-button" class="btn btn-primary mt-2">Send Message</button>
        </div>
        <input type="hidden" name="action" id="action">
        <hr />
        <div id="status" class="mt-2 me-2 float-end">test</div>
        <div id="chatbox" class="chatbox">
        </div>
      </div>
      <div class="col-md-4">
        <h3>Who's online</h3>
        <ul id="userList">
        </ul>
      </div>
    </form>
  </div>
  <script src="/static/reconnecting-websocket.min.js"></script>
  <script>
    let socket = null;
    const form = document.getElementById("chat-form");
    const userInput = document.getElementById("username");
    const messageInput = document.getElementById("message");
    const sendButton = document.getElementById("send-button")
    const chatbox = document.getElementById("chatbox");
    const status = document.getElementById("status");
    const offlineBadge = `<span class="badge bg-danger opacity-75">Not connected</span>`;
      const onlineBadge = `<span class="badge bg-success opacity-75">Connected</span>`;

    window.onbeforeunload = function() {
      console.log("leaving")
      const jsonData = {};
      jsonData.action = "left";
      socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function(){
      socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, { debug: true, reconnectInterval: 1500 });

      socket.onopen = () => {
        console.log("Successfully connected")
        status.innerHTML = onlineBadge;
      }

      socket.onclose = () => {
        console.log("connection closed")
        status.innerHTML = offlineBadge;
      }

      socket.onerror = err => {
        console.log(new Error(err));
        status.innerHTML = offlineBadge;
      }

      socket.onmessage = msg => {
        let data = JSON.parse(msg.data)
        switch (data.action) {
          case "listUsers":
            const ul = document.getElementById("userList");
            while (ul.firstChild) {
              ul.removeChild(ul.firstChild);
            }

            if (data.connectedUsers.length > 0) {
              data.connectedUsers.forEach(function(user){
                const li = document.createElement("li");
                li.appendChild(document.createTextNode(user))
                ul.appendChild(li);
              });
            }
            break;
          case "broadcast":
            chatbox.innerHTML = chatbox.innerHTML + data.message + "<br />";
            break;
        }
      }

      form.addEventListener("submit", function(event) {
        event.preventDefault();
      });

      userInput.addEventListener("change", function() {
        const jsonData = {};
        jsonData.action = "username";
        jsonData.username = this.value;
        socket.send(JSON.stringify(jsonData));
      });
      
      messageInput.addEventListener("keydown", function(event) {
        if (event.code === "Enter") {
          if (!socket) {
            console.log("no connection")
            return false;
          }
          event.preventDefault();
          event.stopPropagation();
          sendMessage();
        }
      });

      sendButton.addEventListener("click", function() {
        sendMessage();
      });
    })

    function sendMessage() {
      if (!checkUserAndMessage()) return false;

      const jsonData = {};
      jsonData.action = "broadcast";
      jsonData.username = document.getElementById("username").value;
      jsonData.message = document.getElementById("message").value;
      socket.send(JSON.stringify(jsonData))
      document.getElementById("message").value = "";
    }

    function checkUserAndMessage() {
      if ((userInput.value === "") || (messageInput.value === "")) {
        alert("Add a name and enter a message.")
        return false;
      }
      return true;
    }
  </script>
</body>
</html>